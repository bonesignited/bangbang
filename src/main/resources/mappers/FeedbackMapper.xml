<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zlx.bangbang.dao.FeedbackMapper" >
  <resultMap id="BaseResultMap" type="com.zlx.bangbang.domain.Feedback" >
    <constructor >
      <idArg column="feedback_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="content" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="user_id" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="is_read" jdbcType="BIT" javaType="java.lang.Boolean" />
      <arg column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List" >
    feedback_id, content, user_id, is_read, create_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from feedback
    where feedback_id = #{feedbackId,jdbcType=INTEGER}
  </select>
    <select id="findByIsRead" resultMap="BaseResultMap">
      select
      <include refid="Base_Column_List"/>
      from substitute.feedback
      where is_read = true
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from feedback
    where feedback_id = #{feedbackId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.zlx.bangbang.domain.Feedback" >
    insert into feedback (feedback_id, content, user_id, 
      is_read, create_time)
    values (#{feedbackId,jdbcType=INTEGER}, #{content,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, 
      #{isRead,jdbcType=BIT}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.zlx.bangbang.domain.Feedback" >
    insert into feedback
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="feedbackId != null" >
        feedback_id,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="isRead != null" >
        is_read,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="feedbackId != null" >
        #{feedbackId,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="isRead != null" >
        #{isRead,jdbcType=BIT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zlx.bangbang.domain.Feedback" >
    update feedback
    <set >
      <if test="content != null" >
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="isRead != null" >
        is_read = #{isRead,jdbcType=BIT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where feedback_id = #{feedbackId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zlx.bangbang.domain.Feedback" >
    update feedback
    set content = #{content,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=VARCHAR},
      is_read = #{isRead,jdbcType=BIT},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where feedback_id = #{feedbackId,jdbcType=INTEGER}
  </update>
</mapper>